{"ast":null,"code":"var _jsxFileName = \"/Users/mckaylalankau/before-i-go/src/cardcomponents/curved-text.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var CurvedText = _ref => {\n  let {\n    text,\n    arc,\n    radius\n  } = _ref;\n  const string = `${text}`;\n  const characters = string.split('');\n  const degree = arc / characters.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: characters.map((char, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        position: 'absolute',\n        fontFamily: 'var(--secondary)',\n        fontSize: '20px',\n        fontWeight: '600',\n        height: `${radius}px`,\n        transform: `rotate(${degree * i - arc / 2}deg)`,\n        transformOrigin: `0 ${radius}px 0`\n      },\n      children: char\n    }, `heading-span-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_c = CurvedText;\nCurvedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  arc: PropTypes.number,\n  // how curved do you want the text\n  radius: PropTypes.number // how big do you want the curve\n};\nvar _c;\n$RefreshReg$(_c, \"CurvedText\");","map":{"version":3,"names":["React","PropTypes","CurvedText","text","arc","radius","string","characters","split","degree","length","map","char","i","position","fontFamily","fontSize","fontWeight","height","transform","transformOrigin","propTypes","isRequired","number"],"sources":["/Users/mckaylalankau/before-i-go/src/cardcomponents/curved-text.js"],"sourcesContent":["import * as React from 'react'\nimport PropTypes from 'prop-types'\n\nexport var CurvedText = ({ text, arc, radius }) => {\n  const string = `${text}`\n  const characters = string.split('')\n  const degree = arc / characters.length\n\n  return (\n    <div>\n      {characters.map((char, i) => (\n        <span\n          key={`heading-span-${i}`}\n          style={{\n            position: 'absolute',\n            fontFamily: 'var(--secondary)',\n            fontSize: '20px',\n            fontWeight: '600',\n            height: `${radius}px`,\n            transform: `rotate(${degree * i - arc / 2}deg)`,\n            transformOrigin: `0 ${radius}px 0`,\n          }}\n        >\n          {char}\n        </span>\n      ))}\n    </div>\n  )\n}\n\nCurvedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  arc: PropTypes.number, // how curved do you want the text\n  radius: PropTypes.number, // how big do you want the curve\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAAA;AAElC,OAAO,IAAIC,UAAU,GAAG,QAA2B;EAAA,IAA1B;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAO,CAAC;EAC5C,MAAMC,MAAM,GAAI,GAAEH,IAAK,EAAC;EACxB,MAAMI,UAAU,GAAGD,MAAM,CAACE,KAAK,CAAC,EAAE,CAAC;EACnC,MAAMC,MAAM,GAAGL,GAAG,GAAGG,UAAU,CAACG,MAAM;EAEtC,oBACE;IAAA,UACGH,UAAU,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACtB;MAEE,KAAK,EAAE;QACLC,QAAQ,EAAE,UAAU;QACpBC,UAAU,EAAE,kBAAkB;QAC9BC,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE,KAAK;QACjBC,MAAM,EAAG,GAAEb,MAAO,IAAG;QACrBc,SAAS,EAAG,UAASV,MAAM,GAAGI,CAAC,GAAGT,GAAG,GAAG,CAAE,MAAK;QAC/CgB,eAAe,EAAG,KAAIf,MAAO;MAC/B,CAAE;MAAA,UAEDO;IAAI,GAXC,gBAAeC,CAAE,EAAC;MAAA;MAAA;MAAA;IAAA,QAa3B;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV,CAAC;AAAA,KAzBUX,UAAU;AA2BrBA,UAAU,CAACmB,SAAS,GAAG;EACrBlB,IAAI,EAAEF,SAAS,CAACK,MAAM,CAACgB,UAAU;EACjClB,GAAG,EAAEH,SAAS,CAACsB,MAAM;EAAE;EACvBlB,MAAM,EAAEJ,SAAS,CAACsB,MAAM,CAAE;AAC5B,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
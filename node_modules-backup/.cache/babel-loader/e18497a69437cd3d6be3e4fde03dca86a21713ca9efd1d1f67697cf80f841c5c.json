{"ast":null,"code":"var _jsxFileName = \"/Users/mckaylalankau/before-i-go/src/cardcomponents/curved-text.js\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nexport var CurvedText = _ref => {\n  let {\n    text,\n    arc,\n    radius\n  } = _ref;\n  const string = `${text}`;\n  const characters = string.split('');\n  const degree = arc / characters.length;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, characters.map((char, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: `heading-span-${i}`,\n    style: {\n      position: 'absolute',\n      fontFamily: 'var(--secondary)',\n      fontSize: '20px',\n      fontWeight: '600',\n      height: `${radius}px`,\n      transform: `rotate(${degree * i - arc / 2}deg)`,\n      transformOrigin: `0 ${radius}px 0`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, char)));\n};\n_c = CurvedText;\nCurvedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  arc: PropTypes.number,\n  // how curved do you want the text\n  radius: PropTypes.number // how big do you want the curve\n};\nvar _c;\n$RefreshReg$(_c, \"CurvedText\");","map":{"version":3,"names":["React","PropTypes","CurvedText","text","arc","radius","string","characters","split","degree","length","map","char","i","position","fontFamily","fontSize","fontWeight","height","transform","transformOrigin","propTypes","isRequired","number"],"sources":["/Users/mckaylalankau/before-i-go/src/cardcomponents/curved-text.js"],"sourcesContent":["import * as React from 'react'\nimport PropTypes from 'prop-types'\n\nexport var CurvedText = ({ text, arc, radius }) => {\n  const string = `${text}`\n  const characters = string.split('')\n  const degree = arc / characters.length\n\n  return (\n    <div>\n      {characters.map((char, i) => (\n        <span\n          key={`heading-span-${i}`}\n          style={{\n            position: 'absolute',\n            fontFamily: 'var(--secondary)',\n            fontSize: '20px',\n            fontWeight: '600',\n            height: `${radius}px`,\n            transform: `rotate(${degree * i - arc / 2}deg)`,\n            transformOrigin: `0 ${radius}px 0`,\n          }}\n        >\n          {char}\n        </span>\n      ))}\n    </div>\n  )\n}\n\nCurvedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  arc: PropTypes.number, // how curved do you want the text\n  radius: PropTypes.number, // how big do you want the curve\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAElC,OAAO,IAAIC,UAAU,GAAG,QAA2B;EAAA,IAA1B;IAAEC,IAAI;IAAEC,GAAG;IAAEC;EAAO,CAAC;EAC5C,MAAMC,MAAM,GAAI,GAAEH,IAAK,EAAC;EACxB,MAAMI,UAAU,GAAGD,MAAM,CAACE,KAAK,CAAC,EAAE,CAAC;EACnC,MAAMC,MAAM,GAAGL,GAAG,GAAGG,UAAU,CAACG,MAAM;EAEtC,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGH,UAAU,CAACI,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACtB;IACE,GAAG,EAAG,gBAAeA,CAAE,EAAE;IACzB,KAAK,EAAE;MACLC,QAAQ,EAAE,UAAU;MACpBC,UAAU,EAAE,kBAAkB;MAC9BC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE,KAAK;MACjBC,MAAM,EAAG,GAAEb,MAAO,IAAG;MACrBc,SAAS,EAAG,UAASV,MAAM,GAAGI,CAAC,GAAGT,GAAG,GAAG,CAAE,MAAK;MAC/CgB,eAAe,EAAG,KAAIf,MAAO;IAC/B,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEDO,IAAI,CAER,CAAC,CACE;AAEV,CAAC;AAAA,KAzBUV,UAAU;AA2BrBA,UAAU,CAACmB,SAAS,GAAG;EACrBlB,IAAI,EAAEF,SAAS,CAACK,MAAM,CAACgB,UAAU;EACjClB,GAAG,EAAEH,SAAS,CAACsB,MAAM;EAAE;EACvBlB,MAAM,EAAEJ,SAAS,CAACsB,MAAM,CAAE;AAC5B,CAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}